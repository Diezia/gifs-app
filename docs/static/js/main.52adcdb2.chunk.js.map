{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","categories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","className","type","value","onChange","target","GifGridItem","url","title","id","src","alt","getGifs","a","fetch","encodeURI","res","json","data","gifs","map","elem","images","downsized","GifGrid","loading","state","setState","useEffect","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"gLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,cCyBCQ,EA7BK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAgC,KAAjBC,WACEC,mBAAS,KADM,mBAC5CC,EAD4C,KAChCC,EADgC,KAYnD,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACFP,EAAc,CAACG,IACfC,EAAc,KAKd,SACI,uBACII,UAAU,8BACVC,KAAK,OACLC,MAAOP,EACPQ,SAhBc,SAACL,GACvBF,EAAcE,EAAEM,OAAOF,a,OCJlBG,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,MAAgB,EAATC,GAEtC,OACI,sBAAKR,UAAU,wBAAf,UACI,mBAAGA,UAAU,+BAAb,SAA6CO,IAC7C,qBAAKP,UAAU,4BAA4BS,IAAKH,EAAKI,IAAKH,Q,uBCPzDI,EAAO,uCAAG,WAAQlB,GAAR,qBAAAmB,EAAA,sEAGDC,MAAM,0CAAD,OAA4CC,UAAWrB,GAAvD,uDAHJ,cAGbsB,EAHa,gBAIIA,EAAIC,OAJR,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAK,SAACC,GAAU,IAAD,EAC7B,MAAO,CACHZ,GAAIY,EAAKZ,GACTD,MAAOa,EAAKb,MACZD,IAAG,UAAEc,EAAKC,cAAP,aAAE,EAAaC,UAAUhB,QATjB,kBAYZY,GAZY,2CAAH,sDCIPK,EAAU,SAAC,GAAoB,IAAlB9B,EAAiB,EAAjBA,WAAiB,ECDf,SAAEA,GAAiB,IAAD,EAEhBC,mBAAS,CAC/BuB,KAAM,GACNO,SAAS,IAJ6B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAiB1C,OAVAC,qBAAU,WACNhB,EAASlB,GACJR,MAAM,SAAA8B,GACHW,EAAS,CACLT,KAAMF,EACNS,SAAS,SAGtB,CAAE/B,IAEEgC,EDf0BG,CAAcnC,GAAlC4B,EAD0B,EAC/BJ,KAAaO,EADkB,EAClBA,QACrB,OACI,qCACI,oBAAIxB,UAAU,gBAAd,SAAgCP,IAChC,4BAAK+B,GAAW,gBAChB,qBAAKxB,UAAU,0BAAf,SAEQqB,EAAOF,KAAK,SAACU,GAAD,OACR,cAAC,EAAD,eAESA,GADEA,EAAMrB,aEV5BsB,EAAe,WAAO,IAAD,EACMpC,mBAAS,CAAC,cADhB,mBACvBD,EADuB,KACXD,EADW,KAG9B,OACI,gCACI,oBAAIQ,UAAU,qBAAd,0BACA,cAAC,EAAD,CAAaR,cAAgBA,EAAgBC,WAAaA,IAC1D,mCAEQA,EAAW0B,KAAK,SAACC,GAAD,OACZ,cAAC,EAAD,CAEI3B,WAAa2B,GADPA,YCTlCW,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAQ1BpD,M","file":"static/js/main.52adcdb2.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories, categories }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setCategories([inputValue]);\r\n        setInputValue('')\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"mb-3 ml-3 rounded-md border\"\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n    categories: PropTypes.array.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ url, title, id }) => {\r\n    // console.log(props)\r\n    return (\r\n        <div className=\"m-3 rounded-md border\">\r\n            <p className=\"text-center py-3 bg-gray-700\">{title}</p>\r\n            <img className=\"h-40 w-40 sm:h-96 sm:w-96\" src={url} alt={title} />\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async ( categories ) => {\r\n    // return a promise that resolves in an array of objects with 10 images data\r\n\r\n    const res = await fetch(`https://api.giphy.com/v1/gifs/search?q=${ encodeURI( categories ) }&limit=10&api_key=8RS3w12eUSKMe9mx907E4u15x0TsC4XS`);\r\n    const { data } = await res.json();\r\n    const gifs = data.map( (elem) => {\r\n        return { \r\n            id: elem.id,\r\n            title: elem.title,\r\n            url: elem.images?.downsized.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nexport const GifGrid = ({ categories }) => {\r\n    const { data:images, loading } = useFetchGifs( categories )\r\n    return (\r\n        <>\r\n            <h3 className=\"text-3xl ml-3\">{ categories }</h3>\r\n            <p>{ loading && 'cargando...' }</p>\r\n            <div className=\"flex flex-row flex-wrap\">\r\n                {\r\n                    images.map( (image) => (\r\n                        <GifGridItem\r\n                            key= { image.id }\r\n                            { ...image } // las propiedades que estoy mandando son las de elem con el spread. En este caso: id, title, url.\r\n                        />\r\n                    ))\r\n                    \r\n                }\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( categories ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs( categories )\r\n            .then( res => {\r\n                setState({\r\n                    data: res,\r\n                    loading: false\r\n                })\r\n            }) // \"setImages\" es lo mismo que \"gifs => setImages(gifs)\"\r\n    }, [ categories ])\r\n\r\n    return state;\r\n}\r\n","import React, {useState} from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['one punch'])\r\n   \r\n    return (\r\n        <div>\r\n            <h1 className=\"text-4xl mb-3 ml-3\">GifExpertApp</h1>\r\n            <AddCategory setCategories={ setCategories } categories={ categories } />\r\n            <>\r\n                {\r\n                    categories.map( (elem) => (\r\n                        <GifGrid\r\n                            key={ elem }\r\n                            categories={ elem } \r\n                        />\r\n                    ))\r\n                }\r\n            </>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {GifExpertApp} from './GifExpertApp'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}